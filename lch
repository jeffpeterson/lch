#!/usr/bin/env bash

prefix=lch.

usage() {
	cat<<-END
		Usage:
		  lch load <name>   - load an agent installed by lch
		  lch unload <name> - unload an agent installed by lch
		  lch reload <name> - reload an agent installed by lch

		  lch start <name> - start a loaded agent
		  lch stop <name>  - stop a loaded agent

		  lch brew <name>   - load an agent from an homebrew formula and tell it not to start at boot
		  lch unbrew <name> - unload agent from an homebrew formula

		  lch cat <name>  - show plist of agent
		  lch edit <name> - edit an agent's plist
		  lch list        - list agents installed by lch
		  lch new <name>  - create an empty agent
		  lch rm <name>   - remove an agent installed by lch

		  lch add <name> <key> <type> <value> - add a key to an agent's plist
		  lch set <name> <key> <value>        - set a key in an agent's plist

		Examples:
		  brew install mysql
		  lch brew mysql
		  lch start mysql
	END
}

lch() {
	case $1 in
		new)
			name=$2
			require $name
			cat > `agentname $name` <<-END
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
				<plist version="1.0">
				<dict>
				  <key>Label</key>
				  <string>$prefix$2</string>

				  <key>ProgramArguments</key>
				  <array>
				    <string>/path/to/command</string>
				    <string>--help</string>
				  </array>

				  <key>WorkingDirectory</key>
				  <string>/usr/local/var</string>

				  <key>StandardErrorPath</key>
				  <string>$HOME/.log/$prefix$2.stderr.log</string>

				  <key>StandardOutPath</key>
				  <string>$HOME/.log/$prefix$2.stdout.log</string>

				  <key>EnvironmentVariables</key>
				  <dict>
				    <key>PATH</key>
				    <string>$PATH</string>
				  </dict>
				</dict>
				</plist>
			END
			mkdir -p $HOME/.log
		;;

	brew)
		name=$2
		require $name

		filename="/usr/local/opt/$name/homebrew.mxcl.$name.plist"

		cat "$filename" >/dev/null || exit 1;

		cat "$filename" | replace $name > `agentname $name`
		lch load $name
	;;

	unbrew)
		name=$2
		require $name

		lch unload $name
		lch rm $name
	;;

	set)
		require $2 # name
		require $3 # key
		require $4 # value

		filename=`agentname $2`

		cat $filename | set $3 "${@:4}" > $filename
	;;

	add)
		require $2 # name
		require $3 # key
		require $4 # type
		require $5 # value

		filename=`agentname $2`

		cat $filename | add $3 $4 "${@:5}" > $filename
	;;


	restart | kickstart)
		name=$2
		require $name

		run launchctl kickstart -k -p `target $name`
	;;

	blame)
		name=$2
		require $name

		run launchctl blame `target $name`
	;;

	print)
		name=$2
		require $name

		run launchctl print `target $name`
	;;

	uncache)
		name=$2
		require $name

		run launchctl uncache `target $name`
	;;

	enable)
		name=$2
		require $name

		run launchctl enable `target $name`
	;;

	disable)
		name=$2
		require $name

		run launchctl disable `target $name`
	;;

	start)
		name=$2
		require $name

		launchctl start $prefix$name
	;;

	stop)
		name=$2
		require $name

		launchctl stop $prefix$name
	;;




	load)
		name=$2
		require $name

		launchctl load `agentname $name`
	;;

	reload)
		lch unload $2
		lch load $2
	;;

	unload)
		name=$2
		require $name

		launchctl unload `agentname $name`
	;;

	list | ls)
		launchctl list | head -n1
		launchctl list | grep -E "$prefix.+"
	;;

	cat)
		name=$2
		require $name

		cat `agentname $name`
	;;

  tail | log)
    name=$2
    require $name

    tail -n100 -f "$HOME/.log/$prefix$name.stderr.log" "$HOME/.log/$prefix$name.stdout.log"
  ;;

	edit)
		name=$2
		require $name

		$EDITOR `agentname $name`
	;;

	rm)
		name=$2
		require $name

		rm `agentname $name`
	;;
	*)
		usage
	esac
}

run() {
  echo "$@"
  $@
}

agentname() {
  echo -n "$HOME/Library/LaunchAgents/$prefix$1.plist"
}

target() {
	echo -n "gui/$UID/$prefix$1"
}

plist() {
	/usr/libexec/PlistBuddy "$@"
}

replace() {
	cat \
	| set RunAtLoad false \
	| set KeepAlive false \
	| set Label "$prefix$name"
}

set() {
	key="$1"
	value="${@:2}"
	tmpfile=/tmp/lch-$RANDOM.plist

	cat > $tmpfile
	plist -c "Set :$key $value" $tmpfile
	cat $tmpfile
}

add() {
	key="$1"
	type="$2"
	value="${@:3}"
	tmpfile=/tmp/lch-$RANDOM.plist

	cat > $tmpfile
	plist -c "Add :$key $type $value" $tmpfile
	cat $tmpfile
}

require() {
	[[ -z "$1" ]] && usage && exit 1
}

lch "$@"
